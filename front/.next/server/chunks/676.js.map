{"version":3,"file":"676.js","mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAA0B;AACgB;AACA;AACE;AACuB;AAiBnE,MAAMK,OAAO,GAAGF,uEAAM,CAAC;AAMvB,MAAMI;AAUN,MAAMC,MAAM;AAOZ,MAAMC;AAMN;AAKA,MAAME,OAAO,GAAGR,EAAE,CAACG,GAAG,CAAC;AAIvB;IACE;IACA;IAAkE,CAAC;IACnE,MAAMY;QACJJ,QAAQ,CACNV;YACEe;;SAED,CAAC,CACH,CAAC;KACH;IACD;;;;0FAOUO;;kBAEA;;;;;;;;;;;;;4EAMI;;4BAECA,SAAS;0GACZ;gCAAQM;;;;;kBAGD;;UACI;MACX,CACV;CACH;AAED,eAAepB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjGf;AAA0B;AAEkB;AACK;AACP;AACA;AACA;AAEsB;AAEhE,MAAMP,OAAO,GAAGF,uEAAM,CAAC;AAOvB,MAAMiC;AAeN,MAAME;AAUN,SAASC;IACP;IACA,MAAM;;IACN,MAAM,EAAEE,KAAAA,4EAAUC;IAClB;;;YAEgDrB;YAAiBwB,MAAM;SAAM,CAAC,CAC3E,CAAC;QACFF,KAAK,EAAE,CAAC;KACT;IACD;;YAEUI;;;oBAED,2EAAGN,CAAQ,CAAC;wBAAaO;;;;;;kBAKb;;;MAET,CACV;CACH;AAED,eAAeT,EAAAA,sFAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnE3B;AAK2B;AAEe;AAEA;AACE;AAKb;AAG/B,MAAMkB,aAAa,GAAGtD,uEAAM,CAAC;AAU7B,MAAMuD;AAcN,SAASC;IACP,MAAM7C;IAEN,MAAM,EAAEC,EAAE,GAAE;IAAsD,CAAC;IAEnE;;;SAGqB,MAAZ;;YAC2B,CAAC,CAAC;SACnC;KACF;IACD,MAAMkD;;KAEL;IAED,MAAMC;QACJ,IAAI,CAACnD,EAAE,EAAE;YACPgD,KAAK,CAAC;;;SAGP;KACF;IAED,MAAMI,UAAAA,wDAAsB;;YAExBJ,KAAK,CAAC;SACP,MAAM;YACLjD,QAAQ,CAAC0C,uBAAuB,CAACnC,MAAM,CAAC,CAAC,CAAC;SAC3C;KACF;IACD,MAAM+C;IAAiD,CAAC;IAExD;;uGAEY;;0BACN;cACQ;YAETA,MAAM,iBACL,KAACV,OAAO;gBAAC1B;wGACP,IAACqB;;;cACO,iBAEV;gBAASrB;0BACP,mBAACoB,aAAa,KAAG;cACT;2GAEJ;;;cAEE;;MACI,CAChB;CACH;AAED,eAAeO,WAAW,kDAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjG3B;AAAwC;AACI;AACZ;AACgB;AAER;AACA;AACA;AACX;AAE7B,MAAMtD,OAAO,GAAGF,uEAAM,CAAC;AAYvB,MAAMyE;AAKN,MAAMC;AAON,MAAMrE,MAAM;AAOZ,MAAMsE;AAQN,MAAMpE,IAAI;AAKV,MAAMqE;AAoCN,SAASC,QAAQ;IACf;IAEA;;YAEKxC,IAAI,CAAC0C,MAAM,uEAAEC,EAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBAyBhBvB;wBACAC,gBAAgB,EAAEA,cAAAA,+CAAgB;sBAClC;;;;;iFAG2B;;gCACpBnC,EAAAA,uDAAAA,EAAS,EAAC,gBAAgB;;gGAC7B;;4CAAec,IAAI,CAACgD,QAAQ,CAACL,MAAM;4CAAC,4BAAM;;;oGAClC,MAAP7E,KAAG;wCAACoB;;4CACFc,IAAI,CAACoB,MAAM,CAACuB,MAAM;4CAAC;;sCAChB;;8BACF;4BAEL3C,IAAI,CAACgD;oCACuB,GAAG3E,OAAO;mCAAvBA,OAAO,CAACO,EAAE,CAAiB;4BAC1C,CAAC;;sBACD,GACD,IAAI;;cACO;;MACT,CACV;CACH;AAED,eAAe4D,QAAQ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/IxB;AAA6B;AACH;AAE1B,SAASN,WAAW,CAAC,EAAEa,QAAQ,GAAE,EAAE;IACjC,qBACE,mDAACjF,KAAG;kBACDiF,QAAQ,EAAEG,KAAK,eAAe,CAACD,GAAG,CAAC,CAACE,IAAI,EAAEC,KAAK,GAAK;YACnD,IAAID,IAAI,CAACE,KAAK,cAAc,EAAE;gBAC5B,qBACE,mDAAClB,kDAAI;oBAAaU,IAAI,EAAE,CAAC,SAAS,EAAEM,IAAI,CAACG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;8BACjD,iEAACR,GAAC;wBAAC5D,SAAS,EAAC,iBAAiB;kCAAEiE,IAAI;sBAAK;mBADhCC,KAAK,CAET,CACP;aACH;YACD,OAAOD,IAAI,CAAC;SACb,CAAC;MACE,CACN;CACH;AAED,iEAAejB,WAAW,EAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpB3B;AAAkD;AACV;AACP;AACW;AAE5C,MAAMuB,OAAO,GAAG9F,mDAAM,CAAC;AAUvB,MAAM+F;AAWN,MAAMC;AAQN,MAAMC;AAON,MAAMC;AAWN,SAASC;IACP;IACA;;;;;;;;;;;;cAOa;;;;;;;oBAMLU,CAAAA,6CAAAA,CAAAA,gCAAQ,EAAI;;;;;;;;;;;;;cAcA;;MACR;CAEb;AAED,eAAeV,SAAS,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtFzB;AAAiD;AACT;AACJ;AAEpC,SAASgB,SAAS,CAAC,EAAElC,MAAM,GAAE,EAAE;IAC7B,MAAM,EALR,GAKSmC,SAAS,GALlB,GAKoBC,YAAY,MAAIhD,4BAAQ,CAAC,KAAK,CAAC;IACjD,MAAMiD,WAAW,GAAG,IAAM;QACxBD,YAAY,CAAC,IAAI,CAAC,CAAC;KACpB;IAED,MAAMjB,YAAY,GAAG,IAAM;QACzBiB,YAAY,CAAC,KAAK,CAAC,CAAC;KACrB;IACD,IAAIpC,MAAM,CAACD,MAAM,KAAK,CAAC,EAAE;QACvB,qBACE;;8BACE,iBAAC1D,KAAG;oBACFC,SAAS,EAAC,4BAA4B;oBACtCC,GAAG,EAAE,CAAC,sBAAsB,EAAEyD,MAAM,CAAC,CAAC,CAAC,CAACzD,GAAG,CAAC,CAAC;oBAC7CK,OAAO,EAAEyF,WAAW;kBACpB;gBACDF,SAAS,kBAAI,iBAACjB,oBAAS;oBAAClB,MAAM,EAAEA,MAAM;oBAAEmB,YAAY,EAAEA,YAAY;kBAAI;;UACtE,CACH;KACH,MAAM,IAAInB,MAAM,CAACD,MAAM,KAAK,CAAC,EAAE;QAC9B,qBACE,sBAAC7E,KAAG;YAACoB,SAAS,EAAC,MAAM;;8BACnB,iBAACD,KAAG;oBACFC,SAAS,EAAC,4BAA8B;oBACxCC,GAAG,EAAE,CAAC,sBAAsB,EAAEyD,MAAM,CAAC,CAAC,CAAC,CAACzD,GAAG,CAAC,CAAC;oBAC7CK,OAAO,EAAEyF,WAAW;kBACpB;8BACF,iBAAChG,KAAG;oBACFC,SAAS,EAAC,4BAA6B;oBACvCC,GAAG,EAAE,CAAC,sBAAsB,EAAEyD,MAAM,CAAC,CAAC,CAAC,CAACzD,GAAG,CAAC,CAAC;oBAC7CK,OAAO,EAAEyF,WAAW;kBACpB;gBACDF,SAAS,kBAAI,iBAACjB,oBAAS;oBAAClB,MAAM,EAAEA,MAAM;oBAAEmB,YAAY,EAAEA,YAAY;kBAAI;;UACnE,CACN;KACH,MAAM;QACL,qBACE,sBAACjG,KAAG;YAACoB,SAAS,EAAC,MAAM;;8BACnB,iBAACD,KAAG;oBACFC,SAAS,EAAC,2BAA4B;oBACtCC,GAAG,EAAE,CAAC,sBAAsB,EAAEyD,MAAM,CAAC,CAAC,CAAC,CAACzD,GAAG,CAAC,CAAC;oBAC7CK,OAAO,EAAEyF,WAAW;kBACpB;8BACF,iBAACnH,KAAG;oBAACoB,SAAS,EAAC,8CAA8C;8BAC3D,oCAACpB,KAAG;wBACF0B,OAAO,EAAEyF,WAAW;wBACpB/F,SAAS,EAAC,wFAAwF;;0CAElG,iBAAC2F,mBAAY;gCAAC3F,SAAS,EAAC,eAAe;8BAAG;0CAC1C,sBAACpB,KAAG;gCAACoB,SAAS,EAAC,UAAU;;oCACtB0D,MAAM,CAACD,MAAM,GAAG,CAAC;oCAAC,4BACb;kDAAQ,iBAACuC,IAAE,KAAG;oCAAA,qBACd;;8BAAM;;sBACF;kBACF;gBACLH,SAAS,kBAAI,iBAACjB,oBAAS;oBAAClB,MAAM,EAAEA,MAAM;oBAAEmB,YAAY,EAAEA,YAAY;kBAAI;;UACnE,CACN;KACH;CACF;AAED,gDAAee,SAAS,EAAC","sources":["webpack://react-social-app/./components/Comment.tsx","webpack://react-social-app/./components/CommentForm.tsx","webpack://react-social-app/./components/PostButtons.tsx","webpack://react-social-app/./components/PostCard.tsx","webpack://react-social-app/./components/PostContent.tsx","webpack://react-social-app/./components/ImageZoom.tsx","webpack://react-social-app/./components/PostImage.tsx"],"sourcesContent":["import React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport tw from \"tailwind-styled-components\";\r\nimport { commentRemoveRequestAction } from \"../action/postActions\";\r\nimport { RootState } from \"../reducers\";\r\n\r\ninterface CommentProps {\r\n  id: number;\r\n  User: {\r\n    id: number;\r\n    avatar: string;\r\n    nickname: string;\r\n  };\r\n  content: string;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  UserId: number;\r\n  PostId: number;\r\n}\r\n\r\nconst Wrapper = tw.div`\r\n  max-w-sm\r\n  sm:max-w-md\r\n  mx-auto\r\n`;\r\n\r\nconst CommentContainer = tw.div`\r\n  mt-3\r\n  pt-3\r\n  flex\r\n  items-center\r\n  space-x-4\r\n  border-t-[1px]\r\n  border-gray-300\r\n`;\r\n\r\nconst Avatar = tw.div`\r\n  bg-slate-500\r\n  w-10\r\n  h-10\r\n  rounded-full\r\n`;\r\n\r\nconst CommentBox = tw.div`\r\n  flex\r\n  justify-between\r\n  w-full\r\n`;\r\n\r\nconst Name = tw.div`\r\n  text-lg\r\n  font-bold\r\n`;\r\n\r\nconst Content = tw.div`\r\n  text-sm\r\n  text-gray-500\r\n`;\r\nfunction Comment(comment: CommentProps) {\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state: RootState) => state.userReducer);\r\n  const onClickCommentRemove = () => {\r\n    dispatch(\r\n      commentRemoveRequestAction({\r\n        commentId: comment.id,\r\n        postId: comment.PostId,\r\n      })\r\n    );\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <CommentContainer>\r\n        {!comment.User.avatar || comment.User.avatar === \"null\" ? (\r\n          <Avatar />\r\n        ) : (\r\n          <img\r\n            className=\"w-10 h-10 rounded-full\"\r\n            src={`http://localhost:4000/${comment.User.avatar}`}\r\n          />\r\n        )}\r\n        <CommentBox>\r\n          <div className=\"w-3/4 space-y-2\">\r\n            <Name>{comment.User.nickname}</Name>\r\n            <Content>{comment.content}</Content>\r\n          </div>\r\n          {me?.id === comment.UserId ? (\r\n            <div className=\"flex text-xs items-start text-gray-400 space-x-1\">\r\n              <button onClick={onClickCommentRemove}>삭제</button>\r\n            </div>\r\n          ) : null}\r\n        </CommentBox>\r\n      </CommentContainer>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default Comment;\r\n","import React from \"react\";\r\nimport { PostProps } from \"./PostCard\";\r\nimport tw from \"tailwind-styled-components\";\r\nimport { SendOutlined } from \"@ant-design/icons\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\nimport { RootState } from \"../reducers\";\r\nimport { addCommentRequestAction } from \"../action/postActions\";\r\n\r\nconst Wrapper = tw.div`\r\n  max-w-sm\r\n  sm:max-w-md\r\n  mx-auto\r\n  w-full\r\n  flex-col\r\n`;\r\nconst TextArea = tw.textarea`\r\n  w-full\r\n  p-2\r\n  mt-2\r\n  border-[1px]\r\n  border-gray-400\r\n  rounded-md\r\n  focus:outline-none\r\n  focus:ring-1\r\n  focus:ring-indigo-600\r\n  text-sm\r\n  text-gray-500\r\n  scrollbar-hide\r\n`;\r\n\r\nconst SubmitButton = tw.button`\r\n  hover:text-indigo-600\r\n  text-lg\r\n  pl-1\r\n  -mt-2\r\n`;\r\n\r\ninterface ValidForm {\r\n  content: string;\r\n}\r\nfunction CommentForm(post: PostProps) {\r\n  const dispatch = useDispatch();\r\n  const { id } = useSelector((state: RootState) => state.userReducer.me);\r\n  const { register, handleSubmit, reset } = useForm<ValidForm>();\r\n  const onValid = ({ content }: ValidForm) => {\r\n    dispatch(\r\n      addCommentRequestAction({ content: content, postId: post.id, userId: id })\r\n    );\r\n    reset();\r\n  };\r\n  return (\r\n    <Wrapper>\r\n      <form onSubmit={handleSubmit(onValid)}>\r\n        <TextArea\r\n          {...register(\"content\", { required: \"내용을 입력해주세요\" })}\r\n          rows={3}\r\n        />\r\n        <SubmitButton>\r\n          <SendOutlined />\r\n        </SubmitButton>\r\n      </form>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default CommentForm;\r\n","import {\r\n  CommentOutlined,\r\n  DeleteOutlined,\r\n  HeartOutlined,\r\n  HeartTwoTone,\r\n} from \"@ant-design/icons\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nimport { useDispatch } from \"react-redux\";\r\nimport tw from \"tailwind-styled-components\";\r\nimport {\r\n  addLikeRequestAction,\r\n  postDeleteRequestAction,\r\n  removeLikeRequestAction,\r\n} from \"../action/postActions\";\r\nimport { RootState } from \"../reducers\";\r\n\r\nconst ButtonWrapper = tw.div`\r\n  flex\r\n  justify-between\r\n  border-t-[1px]\r\n  border-gray-400\r\n  h-9\r\n  pt-2\r\n  mt-2\r\n`;\r\n\r\nconst IconBox = tw.div`\r\n  w-1/3\r\n  text-center\r\n  text-lg\r\n  h-full\r\n  hover:shadow-sm\r\n  flex\r\n  items-center\r\n  justify-center\r\n  cursor-pointer\r\n  hover:text-indigo-600\r\n  \r\n`;\r\n\r\nfunction PostButtons({ postId, Likers, setCommentOpened }) {\r\n  const dispatch = useDispatch();\r\n\r\n  const { me } = useSelector((state: RootState) => state.userReducer);\r\n\r\n  const onClickComment = () => {\r\n    if (!me) {\r\n      alert(\"로그인이 필요합니다.\");\r\n    } else {\r\n      setCommentOpened((prev) => !prev);\r\n    }\r\n  };\r\n  const onClickDeletePost = () => {\r\n    dispatch(postDeleteRequestAction(postId));\r\n  };\r\n\r\n  const onClickLike = () => {\r\n    if (!me) {\r\n      alert(\"로그인이 필요합니다.\");\r\n    } else {\r\n      dispatch(addLikeRequestAction(postId));\r\n    }\r\n  };\r\n\r\n  const onClickUnLike = () => {\r\n    if (!me) {\r\n      alert(\"로그인이 필요합니다.\");\r\n    } else {\r\n      dispatch(removeLikeRequestAction(postId));\r\n    }\r\n  };\r\n  const isLike = Likers.find((like) => like.id === me?.id);\r\n\r\n  return (\r\n    <ButtonWrapper>\r\n      <IconBox onClick={onClickDeletePost}>\r\n        <DeleteOutlined />\r\n      </IconBox>\r\n\r\n      {isLike ? (\r\n        <IconBox onClick={onClickUnLike}>\r\n          <HeartTwoTone twoToneColor=\"#eb2f96\" />\r\n        </IconBox>\r\n      ) : (\r\n        <IconBox onClick={onClickLike}>\r\n          <HeartOutlined />\r\n        </IconBox>\r\n      )}\r\n      <IconBox onClick={onClickComment}>\r\n        <CommentOutlined />\r\n      </IconBox>\r\n    </ButtonWrapper>\r\n  );\r\n}\r\n\r\nexport default PostButtons;\r\n","import React, { useState } from \"react\";\r\nimport tw from \"tailwind-styled-components\";\r\nimport Comment from \"./Comment\";\r\nimport PostImage from \"../components/PostImage\";\r\n\r\nimport CommentForm from \"./CommentForm\";\r\nimport PostButtons from \"./PostButtons\";\r\nimport PostContent from \"./PostContent\";\r\nimport Link from \"next/link\";\r\n\r\nconst Wrapper = tw.div`\r\n  max-w-sm\r\n  mx-auto\r\n  sm:max-w-md\r\n  border-2\r\n  shadow-sm\r\n  flex-col\r\n  justify-center\r\n  mt-4\r\n  mb-2\r\n`;\r\n\r\nconst ContentWrapper = tw.div`\r\n  p-2\r\n  w-full\r\n`;\r\n\r\nconst ContentContainer = tw.div`\r\n  flex\r\n  items-center\r\n  space-x-4\r\n  w-full\r\n`;\r\n\r\nconst Avatar = tw.div`\r\n  bg-slate-500\r\n  rounded-full\r\n  w-12\r\n  h-12\r\n`;\r\n\r\nconst ContentInfo = tw.div`\r\n  flex-col\r\n  justify-start\r\n  space-y-2\r\n  items-start\r\n  w-full\r\n`;\r\n\r\nconst Name = tw.div`\r\n  text-lg\r\n  font-bold\r\n`;\r\n\r\nconst CommentCount = tw.div`\r\n  text-sm\r\n  text-gray-500\r\n  mt-2\r\n`;\r\n\r\nexport interface PostProps {\r\n  id: number;\r\n  User: { id: number; nickname: string; avatar: string };\r\n  UserId: number;\r\n  content: string;\r\n  Comments: {\r\n    id: number;\r\n    User: {\r\n      id: number;\r\n      avatar: string;\r\n      nickname: string;\r\n    };\r\n    content: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    UserId: number;\r\n    PostId: number;\r\n  }[];\r\n  Images: {\r\n    id: number;\r\n    src: string;\r\n    createdAt: string;\r\n    updatedAt: string;\r\n    PostId: number;\r\n  }[];\r\n  Likers: { id: number }[];\r\n  createdAt: string;\r\n  updatedAt: string;\r\n}\r\n\r\nfunction PostCard(post: PostProps) {\r\n  const [commentOpened, setCommentOpened] = useState(false);\r\n\r\n  return (\r\n    <Wrapper>\r\n      {post.Images?.length > 0 ? <PostImage images={post.Images} /> : null}\r\n      <ContentWrapper>\r\n        <ContentContainer>\r\n          <div>\r\n            {!post.User?.avatar || post.User?.avatar === \"null\" ? (\r\n              <Avatar />\r\n            ) : (\r\n              <img\r\n                className=\"rounded-full w-12 h-12\"\r\n                src={`http://localhost:4000/${post.User.avatar}`}\r\n              />\r\n            )}\r\n          </div>\r\n          <ContentInfo>\r\n            <Link href={`/user/${post.UserId}`}>\r\n              <a>\r\n                <Name>{post.User?.nickname}</Name>\r\n              </a>\r\n            </Link>\r\n\r\n            <PostContent postData={post.content} />\r\n          </ContentInfo>\r\n        </ContentContainer>\r\n        <PostButtons\r\n          postId={post.id}\r\n          Likers={post.Likers}\r\n          setCommentOpened={setCommentOpened}\r\n        />\r\n        {commentOpened ? (\r\n          <>\r\n            <CommentForm {...post} />\r\n            <div className=\"flex space-x-2\">\r\n              <CommentCount>{post.Comments.length} 개의 댓글</CommentCount>\r\n              <div className=\" text-sm text-gray-500 mt-2\">\r\n                {post.Likers.length} 개의 좋아요\r\n              </div>\r\n            </div>\r\n\r\n            {post.Comments.map((comment) => (\r\n              <Comment key={comment.id} {...comment} />\r\n            ))}\r\n          </>\r\n        ) : null}\r\n      </ContentWrapper>\r\n    </Wrapper>\r\n  );\r\n}\r\n\r\nexport default PostCard;\r\n","import Link from \"next/link\";\r\nimport React from \"react\";\r\n\r\nfunction PostContent({ postData }) {\r\n  return (\r\n    <div>\r\n      {postData?.split(/(#[^\\s#]+)/g).map((hash, index) => {\r\n        if (hash.match(/(#[^\\s#]+)/)) {\r\n          return (\r\n            <Link key={index} href={`/hashtag/${hash.slice(1)}`}>\r\n              <a className=\"text-indigo-400\">{hash}</a>\r\n            </Link>\r\n          );\r\n        }\r\n        return hash;\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PostContent;\r\n","import { CloseOutlined } from \"@ant-design/icons\";\r\nimport React, { useState } from \"react\";\r\nimport Slider from \"react-slick\";\r\nimport tw from \"tailwind-styled-components\";\r\n\r\nconst Overlay = tw.div`\r\n  fixed\r\n  top-0\r\n  bottom-0\r\n  left-0\r\n  right-0\r\n  z-40\r\n  m-auto\r\n`;\r\n\r\nconst Header = tw.div`\r\n  flex\r\n  items-center\r\n  justify-center\r\n  text-center\r\n  h-16\r\n  bg-white\r\n  font-bold\r\n  text-2xl\r\n`;\r\n\r\nconst SliderWrapper = tw.div`\r\n  bg-gray-700\r\n  h-full\r\n  m-auto\r\n  flex\r\n  items-center\r\n`;\r\n\r\nconst CustomSlider = tw(Slider)`\r\n  m-auto\r\n  w-96\r\n  sm:w-10/12\r\n  sm:h-10/12\r\n`;\r\n\r\nconst Button = tw.button`\r\n  absolute\r\n  top-20\r\n  right-6\r\n  text-white\r\n  border\r\n  flex\r\n  justify-center\r\n  items-center\r\n  p-1\r\n`;\r\nfunction ImageZoom({ images, onClickClose }) {\r\n  const [currentSlide, setCurrentSlide] = useState(0);\r\n  return (\r\n    <Overlay>\r\n      <Header>\r\n        <h1>상세 이미지</h1>\r\n        <Button onClick={onClickClose}>\r\n          <CloseOutlined />\r\n        </Button>\r\n      </Header>\r\n      <SliderWrapper>\r\n        <CustomSlider\r\n          initialSlide={0}\r\n          beforeChange={(slide, newSlide) => setCurrentSlide(newSlide)}\r\n          infinite\r\n          arrows={true}\r\n          slidesToShow={1}\r\n          slidesToScroll={1}\r\n        >\r\n          {images.map((image) => (\r\n            <div className=\"m-auto\" key={image.src}>\r\n              <img\r\n                className=\"m-auto p-10 h-72 sm:h-96\"\r\n                src={`http://localhost:4000/${image.src}`}\r\n                alt={image.src}\r\n              />\r\n            </div>\r\n          ))}\r\n        </CustomSlider>\r\n      </SliderWrapper>\r\n    </Overlay>\r\n  );\r\n}\r\n\r\nexport default ImageZoom;\r\n","import { PlusOutlined } from \"@ant-design/icons\";\r\nimport React, { useState } from \"react\";\r\nimport ImageZoom from \"./ImageZoom\";\r\n\r\nfunction postImage({ images }) {\r\n  const [imageZoom, setImageZoom] = useState(false);\r\n  const onClickZoom = () => {\r\n    setImageZoom(true);\r\n  };\r\n\r\n  const onClickClose = () => {\r\n    setImageZoom(false);\r\n  };\r\n  if (images.length === 1) {\r\n    return (\r\n      <>\r\n        <img\r\n          className=\"h-96 w-full cursor-pointer\"\r\n          src={`http://localhost:4000/${images[0].src}`}\r\n          onClick={onClickZoom}\r\n        />\r\n        {imageZoom && <ImageZoom images={images} onClickClose={onClickClose} />}\r\n      </>\r\n    );\r\n  } else if (images.length === 2) {\r\n    return (\r\n      <div className=\"flex\">\r\n        <img\r\n          className=\"h-96 w-1/2  cursor-pointer  \"\r\n          src={`http://localhost:4000/${images[0].src}`}\r\n          onClick={onClickZoom}\r\n        />\r\n        <img\r\n          className=\"h-96 w-1/2  cursor-pointer \"\r\n          src={`http://localhost:4000/${images[1].src}`}\r\n          onClick={onClickZoom}\r\n        />\r\n        {imageZoom && <ImageZoom images={images} onClickClose={onClickClose} />}\r\n      </div>\r\n    );\r\n  } else {\r\n    return (\r\n      <div className=\"flex\">\r\n        <img\r\n          className=\"h-96 w-1/2  cursor-pointer\"\r\n          src={`http://localhost:4000/${images[0].src}`}\r\n          onClick={onClickZoom}\r\n        />\r\n        <div className=\"h-96 w-1/2 flex justify-center items-center \">\r\n          <div\r\n            onClick={onClickZoom}\r\n            className=\"text-sm text-center text-gray-500 hover:font-bold hover:text-indigo-600 cursor-pointer\"\r\n          >\r\n            <PlusOutlined className=\"text-2xl mb-1\" />\r\n            <div className=\"text-sm \">\r\n              {images.length - 1}\r\n              개의 사진 <br /> 더보기\r\n            </div>\r\n          </div>\r\n        </div>\r\n        {imageZoom && <ImageZoom images={images} onClickClose={onClickClose} />}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default postImage;\r\n"],"names":["React","useDispatch","useSelector","tw","commentRemoveRequestAction","Wrapper","div","CommentContainer","Avatar","CommentBox","Name","Content","Comment","comment","dispatch","me","state","userReducer","onClickCommentRemove","commentId","id","postId","PostId","User","avatar","img","className","src","nickname","content","UserId","button","onClick","SendOutlined","useForm","addCommentRequestAction","TextArea","textarea","SubmitButton","CommentForm","post","register","handleSubmit","reset","onValid","userId","form","onSubmit","required","rows","CommentOutlined","DeleteOutlined","HeartOutlined","HeartTwoTone","addLikeRequestAction","postDeleteRequestAction","removeLikeRequestAction","ButtonWrapper","IconBox","PostButtons","Likers","setCommentOpened","onClickComment","alert","prev","onClickDeletePost","onClickLike","onClickUnLike","isLike","find","like","twoToneColor","useState","PostImage","PostContent","Link","ContentWrapper","ContentContainer","ContentInfo","CommentCount","PostCard","commentOpened","Images","length","images","href","a","postData","Comments","map","split","hash","index","match","slice","CloseOutlined","Slider","Overlay","Header","SliderWrapper","CustomSlider","Button","ImageZoom","onClickClose","currentSlide","setCurrentSlide","h1","initialSlide","beforeChange","slide","newSlide","infinite","arrows","slidesToShow","slidesToScroll","image","alt","PlusOutlined","postImage","imageZoom","setImageZoom","onClickZoom","br"],"sourceRoot":""}