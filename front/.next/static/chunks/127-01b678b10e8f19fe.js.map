{"version":3,"file":"static/chunks/127-01b678b10e8f19fe.js","mappings":"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","sources":["webpack://_N_E/./node_modules/@ant-design/icons-svg/es/asn/UserAddOutlined.js","webpack://_N_E/./node_modules/@ant-design/icons/es/icons/UserAddOutlined.js","webpack://_N_E/./components/FollowCard.tsx","webpack://_N_E/./components/Layout.tsx","webpack://_N_E/./node_modules/next/head.js","webpack://_N_E/./node_modules/react-intersection-observer/react-intersection-observer.modern.mjs"],"sourcesContent":["// This icon file is generated automatically.\nvar UserAddOutlined = { \"icon\": { \"tag\": \"svg\", \"attrs\": { \"viewBox\": \"64 64 896 896\", \"focusable\": \"false\" }, \"children\": [{ \"tag\": \"path\", \"attrs\": { \"d\": \"M678.3 642.4c24.2-13 51.9-20.4 81.4-20.4h.1c3 0 4.4-3.6 2.2-5.6a371.67 371.67 0 00-103.7-65.8c-.4-.2-.8-.3-1.2-.5C719.2 505 759.6 431.7 759.6 349c0-137-110.8-248-247.5-248S264.7 212 264.7 349c0 82.7 40.4 156 102.6 201.1-.4.2-.8.3-1.2.5-44.7 18.9-84.8 46-119.3 80.6a373.42 373.42 0 00-80.4 119.5A373.6 373.6 0 00137 888.8a8 8 0 008 8.2h59.9c4.3 0 7.9-3.5 8-7.8 2-77.2 32.9-149.5 87.6-204.3C357 628.2 432.2 597 512.2 597c56.7 0 111.1 15.7 158 45.1a8.1 8.1 0 008.1.3zM512.2 521c-45.8 0-88.9-17.9-121.4-50.4A171.2 171.2 0 01340.5 349c0-45.9 17.9-89.1 50.3-121.6S466.3 177 512.2 177s88.9 17.9 121.4 50.4A171.2 171.2 0 01683.9 349c0 45.9-17.9 89.1-50.3 121.6C601.1 503.1 558 521 512.2 521zM880 759h-84v-84c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v84h-84c-4.4 0-8 3.6-8 8v56c0 4.4 3.6 8 8 8h84v84c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-84h84c4.4 0 8-3.6 8-8v-56c0-4.4-3.6-8-8-8z\" } }] }, \"name\": \"user-add\", \"theme\": \"outlined\" };\nexport default UserAddOutlined;\n","import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\n// GENERATE BY ./scripts/generate.ts\n// DON NOT EDIT IT MANUALLY\nimport * as React from 'react';\nimport UserAddOutlinedSvg from \"@ant-design/icons-svg/es/asn/UserAddOutlined\";\nimport AntdIcon from '../components/AntdIcon';\n\nvar UserAddOutlined = function UserAddOutlined(props, ref) {\n  return /*#__PURE__*/React.createElement(AntdIcon, _objectSpread(_objectSpread({}, props), {}, {\n    ref: ref,\n    icon: UserAddOutlinedSvg\n  }));\n};\n\nUserAddOutlined.displayName = 'UserAddOutlined';\nexport default /*#__PURE__*/React.forwardRef(UserAddOutlined);","import { UserAddOutlined } from \"@ant-design/icons\";\r\nimport React from \"react\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport tw from \"tailwind-styled-components\";\r\nimport { removeMyFollowingRequestAction } from \"../action/userAction\";\r\n\r\nconst Container = tw.div`\r\n  flex \r\n  items-center \r\n  justify-between\r\n  shadow-md\r\n  bg-gray-100\r\n  h-24\r\n  px-4\r\n  my-10\r\n`;\r\n\r\nconst Image = tw.div`\r\n  bg-slate-500\r\n  rounded-full\r\n  w-12\r\n  h-12\r\n`;\r\n\r\nconst Avatar = tw.img`\r\n  rounded-full\r\n  w-12\r\n  h-12\r\n`;\r\ninterface followerProps {\r\n  id: number;\r\n  nickname: string;\r\n  avatar: string;\r\n  isFollowing: boolean;\r\n}\r\n\r\nfunction FollowCard({ id, nickname, avatar, isFollowing }: followerProps) {\r\n  const dispatch = useDispatch();\r\n  const onClickUnFollow = () => {\r\n    dispatch(removeMyFollowingRequestAction(id));\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <div className=\"flex space-x-3 items-center\">\r\n        {avatar === \"null\" ? (\r\n          <Image />\r\n        ) : (\r\n          <Avatar src={`http://localhost:4000/${avatar}`} />\r\n        )}\r\n        <div className=\"text-lg font-bold\">{nickname}</div>\r\n      </div>\r\n      {isFollowing ? (\r\n        <button\r\n          onClick={onClickUnFollow}\r\n          className=\"flex items-center text-sm text-gray-500 hover:text-indigo-700\"\r\n        >\r\n          <UserAddOutlined />\r\n          UnFollow\r\n        </button>\r\n      ) : null}\r\n    </Container>\r\n  );\r\n}\r\n\r\nexport default FollowCard;\r\n","import { TwitterOutlined } from \"@ant-design/icons\";\r\nimport Link from \"next/link\";\r\nimport { useRouter } from \"next/router\";\r\nimport React, { useState } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSelector } from \"react-redux\";\r\nimport tw from \"tailwind-styled-components\";\r\n\r\nimport { RootState } from \"../reducers\";\r\n\r\nconst Wrapper = tw.div`\r\n`;\r\n\r\nconst NavContainer = tw.nav`\r\n  flex\r\n  justify-between\r\n  items-center\r\n  border-b-1\r\n  h-16\r\n  px-10\r\n  bg-gray-100\r\n`;\r\n\r\nconst MenuContainer = tw.div`\r\n  flex\r\n  items-center\r\n  w-full\r\n  max-w-xl\r\n  space-x-10\r\n`;\r\n\r\nconst MenuItem = tw.div`\r\n  hidden\r\n  cursor-pointer\r\n  sm:flex text-gray-500 hover:text-indigo-700 hover:border-b-[1px] hover:font-bold\r\n`;\r\n\r\nconst MobileButton = tw.button`\r\n  sm:hidden\r\n`;\r\n\r\nconst SearchInput = tw.input`\r\n  hidden\r\n  sm:flex\r\n  p-2\r\n  bg-transparent\r\n  placeholder:text-gray-400\r\n  focus:outline-indigo-700\r\n  rounded-md\r\n \r\n`;\r\n\r\nconst MobileSearchInput = tw.input`\r\n  p-2\r\n  bg-transparent\r\n  placeholder:text-gray-300\r\n  focus:outline-indigo-700\r\n  rounded-md\r\n`;\r\n\r\nconst MobileNavContainer = tw.nav<IsToggeldProps>`\r\n  ${(p) =>\r\n    p.$isToggled\r\n      ? \"py-4 shadow-md absolute w-full flex-col z-10 justify-center bg-gray-100 text-gray-500 space-y-2 px-2 \"\r\n      : \"hidden\"}\r\n  sm:hidden\r\n  \r\n`;\r\n\r\ninterface IsToggeldProps {\r\n  $isToggled: boolean;\r\n}\r\n\r\nconst MobileMenuItem = tw.div`\r\n  hover:font-bold \r\n  hover:text-indigo-700\r\n  cursor-pointer\r\n`;\r\n\r\nconst LogIn = tw.a<LogInProps>`\r\n  ${(p) => (p.$isLogIn ? \"hidden\" : \"visible\")}\r\n`;\r\n\r\ninterface LogInProps {\r\n  $isLogIn: boolean;\r\n}\r\nconst Layout = ({ children }) => {\r\n  const { me } = useSelector((state: RootState) => state.userReducer);\r\n  const router = useRouter();\r\n  const isLogIn = useSelector(\r\n    (state: RootState) => state.userReducer.logInDone\r\n  );\r\n  const [isToggled, setIsToggled] = useState(false);\r\n  const onClickMenu = () => {\r\n    setIsToggled(!isToggled);\r\n  };\r\n\r\n  const { register, handleSubmit, reset } = useForm();\r\n  const onSearchMobileValid = (data) => {\r\n    router.push(`/search/${data.searchMobile}`);\r\n    reset();\r\n  };\r\n\r\n  const onSearchValid = (data) => {\r\n    router.push(`/search/${data.search}`);\r\n    reset();\r\n  };\r\n\r\n  return (\r\n    <Wrapper>\r\n      <NavContainer>\r\n        <MenuContainer>\r\n          <TwitterOutlined style={{ color: \"#4F46E5 \", fontSize: \"24px\" }} />\r\n          <MenuItem>\r\n            <Link href=\"/\">\r\n              <a>홈</a>\r\n            </Link>\r\n          </MenuItem>\r\n          {me ? (\r\n            <MenuItem>\r\n              <Link href=\"/profile\">\r\n                <a>마이페이지</a>\r\n              </Link>\r\n            </MenuItem>\r\n          ) : null}\r\n          {!isLogIn ? (\r\n            <MenuItem>\r\n              <Link href=\"/signin\">\r\n                <LogIn $isLogIn={me}>로그인</LogIn>\r\n              </Link>\r\n            </MenuItem>\r\n          ) : null}\r\n        </MenuContainer>\r\n        <MobileButton onClick={onClickMenu}>\r\n          {!isToggled ? (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-6 w-6 hover:text-indigo-600\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M4 6h16M4 12h16M4 18h16\"\r\n              />\r\n            </svg>\r\n          ) : (\r\n            <svg\r\n              xmlns=\"http://www.w3.org/2000/svg\"\r\n              className=\"h-6 w-6 hover:text-indigo-600\"\r\n              fill=\"none\"\r\n              viewBox=\"0 0 24 24\"\r\n              stroke=\"currentColor\"\r\n              strokeWidth=\"2\"\r\n            >\r\n              <path\r\n                strokeLinecap=\"round\"\r\n                strokeLinejoin=\"round\"\r\n                d=\"M6 18L18 6M6 6l12 12\"\r\n              />\r\n            </svg>\r\n          )}\r\n        </MobileButton>\r\n        <form onSubmit={handleSubmit(onSearchValid)}>\r\n          <SearchInput\r\n            autoComplete=\"off\"\r\n            {...register(\"search\")}\r\n            placeholder=\"search\"\r\n          />\r\n        </form>\r\n      </NavContainer>\r\n      <MobileNavContainer $isToggled={isToggled}>\r\n        <MobileMenuItem>\r\n          <Link href=\"/\">\r\n            <a>홈</a>\r\n          </Link>\r\n        </MobileMenuItem>\r\n        <MobileMenuItem>\r\n          {me ? (\r\n            <Link href=\"/profile\">\r\n              <a>마이페이지</a>\r\n            </Link>\r\n          ) : null}\r\n        </MobileMenuItem>\r\n        {!isLogIn ? (\r\n          <MobileMenuItem>\r\n            <Link href=\"/signin\">\r\n              <LogIn $isLogIn={me}>로그인</LogIn>\r\n            </Link>\r\n          </MobileMenuItem>\r\n        ) : null}\r\n        <form onSubmit={handleSubmit(onSearchMobileValid)}>\r\n          <MobileSearchInput\r\n            autoComplete=\"off\"\r\n            {...register(\"searchMobile\")}\r\n            placeholder=\"search\"\r\n          />\r\n        </form>\r\n      </MobileNavContainer>\r\n      {children}\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Layout;\r\n","module.exports = require('./dist/shared/lib/head')\n","import * as React from 'react';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nconst observerMap = new Map();\nconst RootIds = new WeakMap();\nlet rootId = 0;\nlet unsupportedValue = undefined;\n/**\r\n * What should be the default behavior if the IntersectionObserver is unsupported?\r\n * Ideally the polyfill has been loaded, you can have the following happen:\r\n * - `undefined`: Throw an error\r\n * - `true` or `false`: Set the `inView` value to this regardless of intersection state\r\n * **/\n\nfunction defaultFallbackInView(inView) {\n  unsupportedValue = inView;\n}\n/**\r\n * Generate a unique ID for the root element\r\n * @param root\r\n */\n\nfunction getRootId(root) {\n  if (!root) return '0';\n  if (RootIds.has(root)) return RootIds.get(root);\n  rootId += 1;\n  RootIds.set(root, rootId.toString());\n  return RootIds.get(root);\n}\n/**\r\n * Convert the options to a string Id, based on the values.\r\n * Ensures we can reuse the same observer when observing elements with the same options.\r\n * @param options\r\n */\n\n\nfunction optionsToId(options) {\n  return Object.keys(options).sort().filter(key => options[key] !== undefined).map(key => {\n    return `${key}_${key === 'root' ? getRootId(options.root) : options[key]}`;\n  }).toString();\n}\n\nfunction createObserver(options) {\n  // Create a unique ID for this observer instance, based on the root, root margin and threshold.\n  let id = optionsToId(options);\n  let instance = observerMap.get(id);\n\n  if (!instance) {\n    // Create a map of elements this observer is going to observe. Each element has a list of callbacks that should be triggered, once it comes into view.\n    const elements = new Map();\n    let thresholds;\n    const observer = new IntersectionObserver(entries => {\n      entries.forEach(entry => {\n        var _elements$get;\n\n        // While it would be nice if you could just look at isIntersecting to determine if the component is inside the viewport, browsers can't agree on how to use it.\n        // -Firefox ignores `threshold` when considering `isIntersecting`, so it will never be false again if `threshold` is > 0\n        const inView = entry.isIntersecting && thresholds.some(threshold => entry.intersectionRatio >= threshold); // @ts-ignore support IntersectionObserver v2\n\n        if (options.trackVisibility && typeof entry.isVisible === 'undefined') {\n          // The browser doesn't support Intersection Observer v2, falling back to v1 behavior.\n          // @ts-ignore\n          entry.isVisible = inView;\n        }\n\n        (_elements$get = elements.get(entry.target)) == null ? void 0 : _elements$get.forEach(callback => {\n          callback(inView, entry);\n        });\n      });\n    }, options); // Ensure we have a valid thresholds array. If not, use the threshold from the options\n\n    thresholds = observer.thresholds || (Array.isArray(options.threshold) ? options.threshold : [options.threshold || 0]);\n    instance = {\n      id,\n      observer,\n      elements\n    };\n    observerMap.set(id, instance);\n  }\n\n  return instance;\n}\n/**\r\n * @param element - DOM Element to observe\r\n * @param callback - Callback function to trigger when intersection status changes\r\n * @param options - Intersection Observer options\r\n * @param fallbackInView - Fallback inView value.\r\n * @return Function - Cleanup function that should be triggered to unregister the observer\r\n */\n\n\nfunction observe(element, callback, options = {}, fallbackInView = unsupportedValue) {\n  if (typeof window.IntersectionObserver === 'undefined' && fallbackInView !== undefined) {\n    const bounds = element.getBoundingClientRect();\n    callback(fallbackInView, {\n      isIntersecting: fallbackInView,\n      target: element,\n      intersectionRatio: typeof options.threshold === 'number' ? options.threshold : 0,\n      time: 0,\n      boundingClientRect: bounds,\n      intersectionRect: bounds,\n      rootBounds: bounds\n    });\n    return () => {// Nothing to cleanup\n    };\n  } // An observer with the same options can be reused, so lets use this fact\n\n\n  const {\n    id,\n    observer,\n    elements\n  } = createObserver(options); // Register the callback listener for this element\n\n  let callbacks = elements.get(element) || [];\n\n  if (!elements.has(element)) {\n    elements.set(element, callbacks);\n  }\n\n  callbacks.push(callback);\n  observer.observe(element);\n  return function unobserve() {\n    // Remove the callback from the callback list\n    callbacks.splice(callbacks.indexOf(callback), 1);\n\n    if (callbacks.length === 0) {\n      // No more callback exists for element, so destroy it\n      elements.delete(element);\n      observer.unobserve(element);\n    }\n\n    if (elements.size === 0) {\n      // No more elements are being observer by this instance, so destroy it\n      observer.disconnect();\n      observerMap.delete(id);\n    }\n  };\n}\n\nconst _excluded = [\"children\", \"as\", \"triggerOnce\", \"threshold\", \"root\", \"rootMargin\", \"onChange\", \"skip\", \"trackVisibility\", \"delay\", \"initialInView\", \"fallbackInView\"];\n\nfunction isPlainChildren(props) {\n  return typeof props.children !== 'function';\n}\n/**\r\n ## Render props\r\n\n To use the `<InView>` component, you pass it a function. It will be called\r\n whenever the state changes, with the new value of `inView`. In addition to the\r\n `inView` prop, children also receive a `ref` that should be set on the\r\n containing DOM element. This is the element that the IntersectionObserver will\r\n monitor.\r\n\n If you need it, you can also access the\r\n [`IntersectionObserverEntry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry)\r\n on `entry`, giving you access to all the details about the current intersection\r\n state.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView>\r\n {({ inView, ref, entry }) => (\r\n      <div ref={ref}>\r\n        <h2>{`Header inside viewport ${inView}.`}</h2>\r\n      </div>\r\n    )}\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n\n ## Plain children\r\n\n You can pass any element to the `<InView />`, and it will handle creating the\r\n wrapping DOM element. Add a handler to the `onChange` method, and control the\r\n state in your own component. Any extra props you add to `<InView>` will be\r\n passed to the HTML element, allowing you set the `className`, `style`, etc.\r\n\n ```jsx\r\n import { InView } from 'react-intersection-observer';\r\n\n const Component = () => (\r\n <InView as=\"div\" onChange={(inView, entry) => console.log('Inview:', inView)}>\r\n <h2>Plain children are always rendered. Use onChange to monitor state.</h2>\r\n </InView>\r\n );\r\n\n export default Component;\r\n ```\r\n */\n\n\nclass InView extends React.Component {\n  constructor(props) {\n    super(props);\n    this.node = null;\n    this._unobserveCb = null;\n\n    this.handleNode = node => {\n      if (this.node) {\n        // Clear the old observer, before we start observing a new element\n        this.unobserve();\n\n        if (!node && !this.props.triggerOnce && !this.props.skip) {\n          // Reset the state if we get a new node, and we aren't ignoring updates\n          this.setState({\n            inView: !!this.props.initialInView,\n            entry: undefined\n          });\n        }\n      }\n\n      this.node = node ? node : null;\n      this.observeNode();\n    };\n\n    this.handleChange = (inView, entry) => {\n      if (inView && this.props.triggerOnce) {\n        // If `triggerOnce` is true, we should stop observing the element.\n        this.unobserve();\n      }\n\n      if (!isPlainChildren(this.props)) {\n        // Store the current State, so we can pass it to the children in the next render update\n        // There's no reason to update the state for plain children, since it's not used in the rendering.\n        this.setState({\n          inView,\n          entry\n        });\n      }\n\n      if (this.props.onChange) {\n        // If the user is actively listening for onChange, always trigger it\n        this.props.onChange(inView, entry);\n      }\n    };\n\n    this.state = {\n      inView: !!props.initialInView,\n      entry: undefined\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If a IntersectionObserver option changed, reinit the observer\n    if (prevProps.rootMargin !== this.props.rootMargin || prevProps.root !== this.props.root || prevProps.threshold !== this.props.threshold || prevProps.skip !== this.props.skip || prevProps.trackVisibility !== this.props.trackVisibility || prevProps.delay !== this.props.delay) {\n      this.unobserve();\n      this.observeNode();\n    }\n  }\n\n  componentWillUnmount() {\n    this.unobserve();\n    this.node = null;\n  }\n\n  observeNode() {\n    if (!this.node || this.props.skip) return;\n    const {\n      threshold,\n      root,\n      rootMargin,\n      trackVisibility,\n      delay,\n      fallbackInView\n    } = this.props;\n    this._unobserveCb = observe(this.node, this.handleChange, {\n      threshold,\n      root,\n      rootMargin,\n      // @ts-ignore\n      trackVisibility,\n      // @ts-ignore\n      delay\n    }, fallbackInView);\n  }\n\n  unobserve() {\n    if (this._unobserveCb) {\n      this._unobserveCb();\n\n      this._unobserveCb = null;\n    }\n  }\n\n  render() {\n    if (!isPlainChildren(this.props)) {\n      const {\n        inView,\n        entry\n      } = this.state;\n      return this.props.children({\n        inView,\n        entry,\n        ref: this.handleNode\n      });\n    }\n\n    const _this$props = this.props,\n          {\n      children,\n      as\n    } = _this$props,\n          props = _objectWithoutPropertiesLoose(_this$props, _excluded);\n\n    return React.createElement(as || 'div', _extends({\n      ref: this.handleNode\n    }, props), children);\n  }\n\n}\n\n/**\r\n * React Hooks make it easy to monitor the `inView` state of your components. Call\r\n * the `useInView` hook with the (optional) [options](#options) you need. It will\r\n * return an array containing a `ref`, the `inView` status and the current\r\n * [`entry`](https://developer.mozilla.org/en-US/docs/Web/API/IntersectionObserverEntry).\r\n * Assign the `ref` to the DOM element you want to monitor, and the hook will\r\n * report the status.\r\n *\r\n * @example\r\n * ```jsx\r\n * import React from 'react';\r\n * import { useInView } from 'react-intersection-observer';\r\n *\r\n * const Component = () => {\r\n *   const { ref, inView, entry } = useInView({\r\n *       threshold: 0,\r\n *   });\r\n *\r\n *   return (\r\n *     <div ref={ref}>\r\n *       <h2>{`Header inside viewport ${inView}.`}</h2>\r\n *     </div>\r\n *   );\r\n * };\r\n * ```\r\n */\n\nfunction useInView({\n  threshold,\n  delay,\n  trackVisibility,\n  rootMargin,\n  root,\n  triggerOnce,\n  skip,\n  initialInView,\n  fallbackInView,\n  onChange\n} = {}) {\n  const unobserve = React.useRef();\n  const callback = React.useRef();\n  const [state, setState] = React.useState({\n    inView: !!initialInView\n  }); // Store the onChange callback in a `ref`, so we can access the latest instance inside the `useCallback`.\n\n  callback.current = onChange;\n  const setRef = React.useCallback(node => {\n    if (unobserve.current !== undefined) {\n      unobserve.current();\n      unobserve.current = undefined;\n    } // Skip creating the observer\n\n\n    if (skip) return;\n\n    if (node) {\n      unobserve.current = observe(node, (inView, entry) => {\n        setState({\n          inView,\n          entry\n        });\n        if (callback.current) callback.current(inView, entry);\n\n        if (entry.isIntersecting && triggerOnce && unobserve.current) {\n          // If it should only trigger once, unobserve the element after it's inView\n          unobserve.current();\n          unobserve.current = undefined;\n        }\n      }, {\n        root,\n        rootMargin,\n        threshold,\n        // @ts-ignore\n        trackVisibility,\n        // @ts-ignore\n        delay\n      }, fallbackInView);\n    }\n  }, // We break the rule here, because we aren't including the actual `threshold` variable\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  [// If the threshold is an array, convert it to a string so it won't change between renders.\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  Array.isArray(threshold) ? threshold.toString() : threshold, root, rootMargin, triggerOnce, skip, trackVisibility, fallbackInView, delay]);\n  /* eslint-disable-next-line */\n\n  React.useEffect(() => {\n    if (!unobserve.current && state.entry && !triggerOnce && !skip) {\n      // If we don't have a ref, then reset the state (unless the hook is set to only `triggerOnce` or `skip`)\n      // This ensures we correctly reflect the current state - If you aren't observing anything, then nothing is inView\n      setState({\n        inView: !!initialInView\n      });\n    }\n  });\n  const result = [setRef, state.inView, state.entry]; // Support object destructuring, by adding the specific values.\n\n  result.ref = result[0];\n  result.inView = result[1];\n  result.entry = result[2];\n  return result;\n}\n\nexport { InView, defaultFallbackInView, observe, useInView };\n//# sourceMappingURL=react-intersection-observer.modern.mjs.map\n"],"names":["props","ref","AntdIcon","icon","displayName","Container","tw","Image","Avatar","id","nickname","avatar","isFollowing","dispatch","useDispatch","div","className","src","button","onClick","removeMyFollowingRequestAction","UserAddOutlined","Wrapper","NavContainer","MenuContainer","MenuItem","MobileButton","SearchInput","MobileSearchInput","MobileNavContainer","p","$isToggled","MobileMenuItem","LogIn","$isLogIn","children","useSelector","state","userReducer","me","router","useRouter","isLogIn","logInDone","useState","useForm","register","handleSubmit","reset","TwitterOutlined","style","color","fontSize","Link","href","a","setIsToggled","isToggled","svg","xmlns","fill","viewBox","stroke","strokeWidth","path","strokeLinecap","strokeLinejoin","d","form","onSubmit","data","push","search","autoComplete","placeholder","searchMobile","module","exports","observerMap","Map","RootIds","WeakMap","unsupportedValue","rootId","optionsToId","options","Object","keys","sort","filter","key","undefined","map","root","has","set","toString","get","observe","element","callback","fallbackInView","window","IntersectionObserver","bounds","getBoundingClientRect","isIntersecting","target","intersectionRatio","threshold","time","boundingClientRect","intersectionRect","rootBounds","observer","elements","instance","thresholds","entries","forEach","entry","_elements$get","inView","some","trackVisibility","isVisible","Array","isArray","createObserver","callbacks","splice","indexOf","length","delete","unobserve","size","disconnect","useInView","delay","rootMargin","triggerOnce","skip","initialInView","onChange","setState","current","setRef","node","result"],"sourceRoot":""}